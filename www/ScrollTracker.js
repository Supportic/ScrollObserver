const hasProp=(t,i)=>Object.prototype.hasOwnProperty.call(t,i),throttle=(t,i)=>{let r=!1;return function(){r||(t.apply(this,arguments),r=!0,setTimeout(()=>{r=!1},i))}};export default class ScrollTracker{constructor(t){t=t||{};let i=!1,r=!1;hasProp(t,"triggerOnce")&&(i=t.triggerOnce),hasProp(t,"triggerPrevious")&&(r=t.triggerPrevious),this.options=t,this.options.triggerOnce=i,this.options.triggerPrevious=r,this.loaded=!1,this.lastScrollPercent=0,this.isScrollingDown=!1,this.isScrollingUp=!1,this.triggerFunctions={};t=this.scrollListener.bind(this);this.boundScrollListener=throttle(t,300),window.addEventListener("scroll",this.boundScrollListener)}observe(t,i){this.triggerFunctions[t]||(this.triggerFunctions[t]=[]),this.triggerFunctions[t].push(i)}static getScrollPercentage(){var t=window.scrollY/(document.body.offsetHeight-window.innerHeight);return Math.round(100*t)}triggerPreviousScrollHeights(i){let r="";this.loaded?this.isScrollingDown?r="scrolling down":this.isScrollingUp&&(r="scrolling up"):r="page loaded";for(let t=0;t<Object.keys(this.triggerFunctions).length;t+=1){var e=Number(Object.keys(this.triggerFunctions)[t]),s=this.triggerFunctions[e];e<=i&&(s.forEach(t=>t({depth:i,state:r})),this.options.triggerOnce&&(this.triggerFunctions[e]=[]))}}setScrollDirection(t){t<this.lastScrollPercent?(this.isScrollingDown=!1,this.isScrollingUp=!0):(this.isScrollingDown=!0,this.isScrollingUp=!1)}scrollListener(){const i=this.constructor.getScrollPercentage();if(Object.values(this.triggerFunctions).every(t=>0===t.length))window.removeEventListener("scroll",this.boundScrollListener);else if(this.loaded){for(let t=0;t<Object.keys(this.triggerFunctions).length;t+=1){var r=Number(Object.keys(this.triggerFunctions)[t]),e=this.triggerFunctions[r];(this.lastScrollPercent<=r&&i>r||this.lastScrollPercent>=r&&i<r)&&(this.setScrollDirection(i),this.options.triggerPrevious?this.triggerPreviousScrollHeights(r):(e.forEach(t=>t({depth:i,state:this.isScrollingDown?"scrolling down":"scrolling up"})),this.options.triggerOnce&&(this.triggerFunctions[r]=[])))}this.lastScrollPercent=i}else this.lastScrollPercent=i,this.options.triggerPrevious&&this.triggerPreviousScrollHeights(i),this.loaded=!0}}
//# sourceMappingURL=ScrollTracker.js.map
