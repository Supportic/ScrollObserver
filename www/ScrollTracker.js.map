{"version":3,"file":"ScrollTracker.js","sources":["ScrollTracker.js"],"sourcesContent":["const hasProp = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key);\n\n/* eslint-disable */\nconst throttle = (fn, ms) => {\n  let o = !1;\n  return function () {\n    o\n      || (fn.apply(this, arguments),\n      (o = !0),\n      setTimeout(() => {\n        o = !1;\n      }, ms));\n  };\n};\n/* eslint-enable */\n\nexport default class ScrollTracker {\n  constructor(options) {\n    const opts = options || {};\n\n    // trigger all attached callbacks only once the scroll mark was hit\n    let triggerOnce = false;\n    // trigger all attached callbacks below the current seen scroll mark\n    let triggerPrevious = false;\n\n    if (hasProp(opts, 'triggerOnce')) {\n      triggerOnce = opts.triggerOnce;\n    }\n\n    if (hasProp(opts, 'triggerPrevious')) {\n      triggerPrevious = opts.triggerPrevious;\n    }\n\n    this.options = opts;\n    this.options.triggerOnce = triggerOnce;\n    this.options.triggerPrevious = triggerPrevious;\n    this.loaded = false;\n\n    this.lastScrollPercent = 0;\n    this.isScrollingDown = false;\n    this.isScrollingUp = false;\n\n    /**\n     * Collects all callbacks which should fire on a scroll percentage.\n     * @example\n     * {\n     *  \"25\": [fn1, fn2],\n     *  \"50\": [fn1, fn2. fn3],\n     * }\n     */\n    this.triggerFunctions = {};\n\n    // make sure 'this' is available inside the event listener\n    const boundScrollListener = this.scrollListener.bind(this);\n    this.boundScrollListener = throttle(boundScrollListener, 300);\n    window.addEventListener('scroll', this.boundScrollListener);\n  }\n\n  // registers a callback function which should trigger at a percentage\n  observe(percent, fn) {\n    if (this.triggerFunctions[percent]) {\n      this.triggerFunctions[percent].push(fn);\n      return;\n    }\n\n    this.triggerFunctions[percent] = [];\n    this.triggerFunctions[percent].push(fn);\n  }\n\n  static getScrollPercentage() {\n    const scrollPercent = window.scrollY / (document.body.offsetHeight - window.innerHeight);\n    return Math.round(scrollPercent * 100);\n  }\n\n  // executes all callback functions up to the current found scroll mark\n  triggerPreviousScrollHeights(currentScrollPercent) {\n    let state = '';\n    if (!this.loaded) {\n      state = 'page loaded';\n    } else if (this.isScrollingDown) {\n      state = 'scrolling down';\n    } else if (this.isScrollingUp) {\n      state = 'scrolling up';\n    }\n\n    for (let i = 0; i < Object.keys(this.triggerFunctions).length; i += 1) {\n      const triggerPercent = Number(Object.keys(this.triggerFunctions)[i]);\n      const fns = this.triggerFunctions[triggerPercent];\n\n      if (currentScrollPercent >= triggerPercent) {\n        fns.forEach((fn) => fn({ depth: currentScrollPercent, state }));\n\n        if (this.options.triggerOnce) {\n          this.triggerFunctions[triggerPercent] = [];\n        }\n      }\n    }\n  }\n\n  setScrollDirection(currentScrollPercent) {\n    if (currentScrollPercent < this.lastScrollPercent) {\n      this.isScrollingDown = false;\n      this.isScrollingUp = true;\n    } else {\n      this.isScrollingDown = true;\n      this.isScrollingUp = false;\n    }\n  }\n\n  scrollListener() {\n    const staticSelf = this.constructor;\n    const currentScrollPercent = staticSelf.getScrollPercentage();\n\n    // early exit, no trigger functions available\n    if (\n      Object.values(this.triggerFunctions).every((entry) => entry.length === 0)\n    ) {\n      window.removeEventListener('scroll', this.boundScrollListener);\n      return;\n    }\n\n    // can be shifted into constructor on pageload\n    if (!this.loaded) {\n      this.lastScrollPercent = currentScrollPercent;\n\n      if (this.options.triggerPrevious) {\n        this.triggerPreviousScrollHeights(currentScrollPercent);\n      }\n      this.loaded = true;\n      return;\n    }\n\n    for (let i = 0; i < Object.keys(this.triggerFunctions).length; i += 1) {\n      const triggerPercent = Number(Object.keys(this.triggerFunctions)[i]);\n      const fns = this.triggerFunctions[triggerPercent];\n\n      // found the next closest scroll mark\n      if (\n        // up\n        (this.lastScrollPercent <= triggerPercent\n          && currentScrollPercent > triggerPercent)\n        // down\n        || (this.lastScrollPercent >= triggerPercent\n          && currentScrollPercent < triggerPercent)\n      ) {\n        this.setScrollDirection(currentScrollPercent);\n        if (this.options.triggerPrevious) {\n          this.triggerPreviousScrollHeights(triggerPercent);\n        } else {\n          fns.forEach((fn) => fn({\n            depth: currentScrollPercent,\n            state: this.isScrollingDown ? 'scrolling down' : 'scrolling up',\n          }));\n          if (this.options.triggerOnce) {\n            this.triggerFunctions[triggerPercent] = [];\n          }\n        }\n      }\n    }\n\n    this.lastScrollPercent = currentScrollPercent;\n  }\n}\n"],"names":["hasProp","obj","key","Object","prototype","hasOwnProperty","call","throttle","fn","ms","let","o","apply","this","arguments","setTimeout","ScrollTracker","constructor","options","opts","triggerOnce","triggerPrevious","loaded","lastScrollPercent","isScrollingDown","isScrollingUp","triggerFunctions","boundScrollListener","scrollListener","bind","window","addEventListener","observe","percent","push","getScrollPercentage","scrollPercent","scrollY","document","body","offsetHeight","innerHeight","Math","round","triggerPreviousScrollHeights","currentScrollPercent","state","i","keys","length","triggerPercent","Number","fns","forEach","depth","setScrollDirection","values","every","entry","removeEventListener"],"mappings":"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"}